package com.experion.service;


import java.sql.Date;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Scanner;

import com.experion.entity.Product;

public class Service {

	private static DateFormat formatter;
	private static Date date;

	public static Product createProduct() {

		Scanner scanner = new Scanner(System.in);

		SimpleDateFormat formatter = new SimpleDateFormat("dd/MM/yyyy");
		Date date = new Date();

		System.out.println("Enter the product code");
		String productCode = scanner.nextLine();

		System.out.println("Enter the product name");
		String productName = scanner.nextLine();

		System.out.println("Enter the product price");
		double productPrice = scanner.nextDouble();

		System.out.println("Enter the expiry date");
		LocalDate expiryDate = LocalDate.of(scanner.nextInt(), scanner.nextInt(), scanner.nextInt());

		System.out.println("Enter the open date");
		LocalDate openDate =  LocalDate.of(scanner.nextInt(), scanner.nextInt(), scanner.nextInt());
		System.out.println("Enter the validity date");
		LocalDate validityDate =  LocalDate.of(scanner.nextInt(), scanner.nextInt(), scanner.nextInt());
		System.out.println("Enter product active");
		boolean active = scanner.nextBoolean();

		Product product = new Product( productCode, productName,productPrice, openDate,
				validityDate,  expiryDate, active);

//		product.setSerialNO(product.getSerialNO() + 1);
//		product.setSerialNoOg(product.getSerialNO());
		return product;

//		 product.setProductCode(productCode);
//		 product.setProductName(productName);
//		 product.setProductDescription(productDescription);
	}
	
	public static void buyProduct(ArrayList <Product> productList)
	{
		String productCode;
		Scanner scanner = new Scanner(System.in);
		System.out.println("Enter the product code:");
		productCode = scanner.nextLine();
		
		for(Product product:productList)
		{
			if(product.getProductCode() == productCode)
			{
//				DateTimeFormatter dtf = DateTimeFormatter.ofPattern("dd/MM/yyyy");  
//				LocalDateTime now = LocalDateTime.now();
//				Date currentDate = dtf.format(now);
				
				
				SimpleDateFormat formatter = new SimpleDateFormat("dd/MM/yyyy");  
			    Date todayDate = new Date(2022,02,10); 
			    todayDate = (Date) formatter.parse(formatter.format(new Date() ));
				if((todayDate.isAfter(product.getOpenDate()))&&(todayDate.isBefore(product.getValidityDate())))
					System.out.println("You can purchase the product with product code "+productCode);
				else
					System.out.println("Sorry!! You cannot purchase the product with product code "+productCode);
			}
			
		}
		
		
		
	}
	
	
	
	
	
	
	
	

	public static void  dispalyProductDetails(ArrayList<Product> productList) {
		for(Product product:productList)
		{
			if(formatter.format(date).isAfter(product.getExpiryDate())||(formatter.format(date).isEqual(product.getExpiryDate())))
					{
							product.setActive(false);
					}
			else
					{
							product.setActive(true);
					}
		}
		
		System.out.println("productName" + "		" + "productDescription" + "		" + "productPrice" + "		"
				+ "openDate" + "		" + "expiryDate");
		
		for(Product product:productList)
			if(product!=null) {
	
				System.out.println(     product.getProductCode() + "		" + product.getProductName() + "		" +"  " +product.getExpiryDate()+" "+product.isActive() );
			}
}
}
